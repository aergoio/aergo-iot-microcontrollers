/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.5 at Mon May 11 02:12:43 2020. */

#ifndef PB_BLOCKCHAIN_PB_H_INCLUDED
#define PB_BLOCKCHAIN_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _TxType {
    TxType_NORMAL = 0,
    TxType_GOVERNANCE = 1,
    TxType_REDEPLOY = 2,
    TxType_FEEDELEGATION = 3,
    TxType_TRANSFER = 4,
    TxType_CALL = 5,
    TxType_DEPLOY = 6
} TxType;
#define _TxType_MIN TxType_NORMAL
#define _TxType_MAX TxType_DEPLOY
#define _TxType_ARRAYSIZE ((TxType)(TxType_DEPLOY+1))

typedef enum _CommitStatus {
    CommitStatus_TX_OK = 0,
    CommitStatus_TX_NONCE_TOO_LOW = 1,
    CommitStatus_TX_ALREADY_EXISTS = 2,
    CommitStatus_TX_INVALID_HASH = 3,
    CommitStatus_TX_INVALID_SIGN = 4,
    CommitStatus_TX_INVALID_FORMAT = 5,
    CommitStatus_TX_INSUFFICIENT_BALANCE = 6,
    CommitStatus_TX_HAS_SAME_NONCE = 7,
    CommitStatus_TX_INTERNAL_ERROR = 9
} CommitStatus;
#define _CommitStatus_MIN CommitStatus_TX_OK
#define _CommitStatus_MAX CommitStatus_TX_INTERNAL_ERROR
#define _CommitStatus_ARRAYSIZE ((CommitStatus)(CommitStatus_TX_INTERNAL_ERROR+1))

typedef enum _VerifyStatus {
    VerifyStatus_VERIFY_STATUS_OK = 0,
    VerifyStatus_VERIFY_STATUS_SIGN_NOT_MATCH = 1,
    VerifyStatus_VERIFY_STATUS_INVALID_HASH = 2
} VerifyStatus;
#define _VerifyStatus_MIN VerifyStatus_VERIFY_STATUS_OK
#define _VerifyStatus_MAX VerifyStatus_VERIFY_STATUS_INVALID_HASH
#define _VerifyStatus_ARRAYSIZE ((VerifyStatus)(VerifyStatus_VERIFY_STATUS_INVALID_HASH+1))

/* Struct definitions */
typedef struct _ABI {
    pb_callback_t version;
    pb_callback_t language;
    pb_callback_t functions;
    pb_callback_t state_variables;
/* @@protoc_insertion_point(struct:ABI) */
} ABI;

typedef struct _Account {
    pb_callback_t address;
/* @@protoc_insertion_point(struct:Account) */
} Account;

typedef struct _AccountAddress {
    pb_callback_t value;
/* @@protoc_insertion_point(struct:AccountAddress) */
} AccountAddress;

typedef struct _AccountList {
    pb_callback_t accounts;
/* @@protoc_insertion_point(struct:AccountList) */
} AccountList;

typedef struct _BlockBody {
    pb_callback_t txs;
/* @@protoc_insertion_point(struct:BlockBody) */
} BlockBody;

typedef struct _BlockHeaderList {
    pb_callback_t blocks;
/* @@protoc_insertion_point(struct:BlockHeaderList) */
} BlockHeaderList;

typedef struct _BlockMetadataList {
    pb_callback_t blocks;
/* @@protoc_insertion_point(struct:BlockMetadataList) */
} BlockMetadataList;

typedef struct _ChainStats {
    pb_callback_t report;
/* @@protoc_insertion_point(struct:ChainStats) */
} ChainStats;

typedef struct _ConfigItem {
    pb_callback_t props;
/* @@protoc_insertion_point(struct:ConfigItem) */
} ConfigItem;

typedef struct _ConfigItem_PropsEntry {
    pb_callback_t key;
    pb_callback_t value;
/* @@protoc_insertion_point(struct:ConfigItem_PropsEntry) */
} ConfigItem_PropsEntry;

typedef struct _ConsensusInfo {
    pb_callback_t type;
    pb_callback_t info;
    pb_callback_t bps;
/* @@protoc_insertion_point(struct:ConsensusInfo) */
} ConsensusInfo;

typedef struct _Empty {
    char dummy_field;
/* @@protoc_insertion_point(struct:Empty) */
} Empty;

typedef struct _EnterpriseConfigKey {
    pb_callback_t key;
/* @@protoc_insertion_point(struct:EnterpriseConfigKey) */
} EnterpriseConfigKey;

typedef struct _EventList {
    pb_callback_t events;
/* @@protoc_insertion_point(struct:EventList) */
} EventList;

typedef struct _FnArgument {
    pb_callback_t name;
/* @@protoc_insertion_point(struct:FnArgument) */
} FnArgument;

typedef struct _Input {
    pb_callback_t hash;
    pb_callback_t address;
    pb_callback_t value;
    pb_callback_t script;
/* @@protoc_insertion_point(struct:Input) */
} Input;

typedef struct _KeyParams {
    pb_callback_t key;
/* @@protoc_insertion_point(struct:KeyParams) */
} KeyParams;

typedef struct _NodeReq {
    pb_callback_t timeout;
    pb_callback_t component;
/* @@protoc_insertion_point(struct:NodeReq) */
} NodeReq;

typedef struct _Query {
    pb_callback_t contractAddress;
    pb_callback_t queryinfo;
/* @@protoc_insertion_point(struct:Query) */
} Query;

typedef struct _ServerInfo {
    pb_callback_t status;
    pb_callback_t config;
/* @@protoc_insertion_point(struct:ServerInfo) */
} ServerInfo;

typedef struct _ServerInfo_StatusEntry {
    pb_callback_t key;
    pb_callback_t value;
/* @@protoc_insertion_point(struct:ServerInfo_StatusEntry) */
} ServerInfo_StatusEntry;

typedef struct _SingleBytes {
    pb_callback_t value;
/* @@protoc_insertion_point(struct:SingleBytes) */
} SingleBytes;

typedef struct _SingleString {
    pb_callback_t value;
/* @@protoc_insertion_point(struct:SingleString) */
} SingleString;

typedef struct _TxList {
    pb_callback_t txs;
/* @@protoc_insertion_point(struct:TxList) */
} TxList;

typedef struct _Vote {
    pb_callback_t candidate;
    pb_callback_t amount;
/* @@protoc_insertion_point(struct:Vote) */
} Vote;

typedef struct _VoteInfo {
    pb_callback_t id;
    pb_callback_t candidates;
    pb_callback_t amount;
/* @@protoc_insertion_point(struct:VoteInfo) */
} VoteInfo;

typedef struct _VoteList {
    pb_callback_t votes;
    pb_callback_t id;
/* @@protoc_insertion_point(struct:VoteList) */
} VoteList;

typedef struct _AccountAndRoot {
    pb_callback_t Account;
    pb_callback_t Root;
    bool Compressed;
/* @@protoc_insertion_point(struct:AccountAndRoot) */
} AccountAndRoot;

typedef struct _BlockBodyPaged {
    uint32_t total;
    uint32_t offset;
    uint32_t size;
    BlockBody body;
/* @@protoc_insertion_point(struct:BlockBodyPaged) */
} BlockBodyPaged;

typedef struct _BlockHeader {
    pb_callback_t chainID;
    pb_callback_t prevBlockHash;
    uint64_t blockNo;
    int64_t timestamp;
    pb_callback_t blocksRootHash;
    pb_callback_t txsRootHash;
    pb_callback_t receiptsRootHash;
    uint64_t confirms;
    pb_callback_t pubKey;
    pb_callback_t coinbaseAccount;
    pb_callback_t sign;
    pb_callback_t consensus;
/* @@protoc_insertion_point(struct:BlockHeader) */
} BlockHeader;

typedef struct _ChainId {
    pb_callback_t magic;
    bool public;
    bool mainnet;
    pb_callback_t consensus;
    int32_t version;
/* @@protoc_insertion_point(struct:ChainId) */
} ChainId;

typedef struct _CommitResult {
    pb_callback_t hash;
    CommitStatus error;
    pb_callback_t detail;
/* @@protoc_insertion_point(struct:CommitResult) */
} CommitResult;

typedef struct _ContractVarProof {
    pb_callback_t value;
    bool inclusion;
    pb_callback_t proofKey;
    pb_callback_t proofVal;
    pb_callback_t bitmap;
    uint32_t height;
    pb_callback_t auditPath;
    pb_callback_t key;
/* @@protoc_insertion_point(struct:ContractVarProof) */
} ContractVarProof;

typedef struct _EnterpriseConfig {
    pb_callback_t key;
    bool on;
    pb_callback_t values;
/* @@protoc_insertion_point(struct:EnterpriseConfig) */
} EnterpriseConfig;

typedef struct _Event {
    pb_callback_t contractAddress;
    pb_callback_t eventName;
    pb_callback_t jsonArgs;
    int32_t eventIdx;
    pb_callback_t txHash;
    pb_callback_t blockHash;
    uint64_t blockNo;
    int32_t txIndex;
/* @@protoc_insertion_point(struct:Event) */
} Event;

typedef struct _FilterInfo {
    pb_callback_t contractAddress;
    pb_callback_t eventName;
    uint64_t blockfrom;
    uint64_t blockto;
    bool desc;
    pb_callback_t argFilter;
    int32_t recentBlockCnt;
/* @@protoc_insertion_point(struct:FilterInfo) */
} FilterInfo;

typedef struct _Function {
    pb_callback_t name;
    pb_callback_t arguments;
    bool payable;
    bool view;
    bool fee_delegation;
/* @@protoc_insertion_point(struct:Function) */
} Function;

typedef struct _ImportFormat {
    SingleBytes wif;
    pb_callback_t oldpass;
    pb_callback_t newpass;
    SingleBytes keystore;
/* @@protoc_insertion_point(struct:ImportFormat) */
} ImportFormat;

typedef struct _ListParams {
    pb_callback_t hash;
    uint64_t height;
    uint32_t size;
    uint32_t offset;
    bool asc;
/* @@protoc_insertion_point(struct:ListParams) */
} ListParams;

typedef struct _Name {
    pb_callback_t name;
    uint64_t blockNo;
/* @@protoc_insertion_point(struct:Name) */
} Name;

typedef struct _Output {
    uint32_t index;
    pb_callback_t address;
    pb_callback_t value;
    pb_callback_t script;
/* @@protoc_insertion_point(struct:Output) */
} Output;

typedef struct _PageParams {
    uint32_t offset;
    uint32_t size;
/* @@protoc_insertion_point(struct:PageParams) */
} PageParams;

typedef struct _PeersParams {
    bool noHidden;
    bool showSelf;
/* @@protoc_insertion_point(struct:PeersParams) */
} PeersParams;

typedef struct _Personal {
    pb_callback_t passphrase;
    Account account;
/* @@protoc_insertion_point(struct:Personal) */
} Personal;

typedef struct _Proposal {
    pb_callback_t id;
    pb_callback_t description;
    uint32_t multipleChoice;
/* @@protoc_insertion_point(struct:Proposal) */
} Proposal;

typedef struct _Receipt {
    pb_callback_t contractAddress;
    pb_callback_t status;
    pb_callback_t ret;
    pb_callback_t txHash;
    pb_callback_t feeUsed;
    pb_callback_t cumulativeFeeUsed;
    pb_callback_t bloom;
    pb_callback_t events;
    uint64_t blockNo;
    pb_callback_t blockHash;
    int32_t txIndex;
    pb_callback_t from;
    pb_callback_t to;
    bool feeDelegation;
    uint64_t gasUsed;
/* @@protoc_insertion_point(struct:Receipt) */
} Receipt;

typedef struct _ServerInfo_ConfigEntry {
    pb_callback_t key;
    ConfigItem value;
/* @@protoc_insertion_point(struct:ServerInfo_ConfigEntry) */
} ServerInfo_ConfigEntry;

typedef struct _Staking {
    pb_callback_t amount;
    uint64_t when;
/* @@protoc_insertion_point(struct:Staking) */
} Staking;

typedef struct _State {
    uint64_t nonce;
    pb_callback_t balance;
    pb_callback_t codeHash;
    pb_callback_t storageRoot;
    uint64_t sqlRecoveryPoint;
/* @@protoc_insertion_point(struct:State) */
} State;

typedef struct _StateQuery {
    pb_callback_t contractAddress;
    pb_callback_t root;
    bool compressed;
    pb_callback_t storageKeys;
/* @@protoc_insertion_point(struct:StateQuery) */
} StateQuery;

typedef struct _StateVar {
    pb_callback_t name;
    pb_callback_t type;
    int32_t len;
/* @@protoc_insertion_point(struct:StateVar) */
} StateVar;

typedef struct _TxBody {
    uint64_t nonce;
    pb_callback_t account;
    pb_callback_t recipient;
    pb_callback_t amount;
    pb_callback_t payload;
    uint64_t gasLimit;
    pb_callback_t gasPrice;
    TxType type;
    pb_callback_t chainIdHash;
    pb_callback_t sign;
/* @@protoc_insertion_point(struct:TxBody) */
} TxBody;

typedef struct _TxIdx {
    pb_callback_t blockHash;
    int32_t idx;
/* @@protoc_insertion_point(struct:TxIdx) */
} TxIdx;

typedef struct _VoteParams {
    pb_callback_t id;
    uint32_t count;
/* @@protoc_insertion_point(struct:VoteParams) */
} VoteParams;

typedef struct _AccountProof {
    State state;
    bool inclusion;
    pb_callback_t key;
    pb_callback_t proofKey;
    pb_callback_t proofVal;
    pb_callback_t bitmap;
    uint32_t height;
    pb_callback_t auditPath;
/* @@protoc_insertion_point(struct:AccountProof) */
} AccountProof;

typedef struct _AccountVoteInfo {
    Staking staking;
    pb_callback_t voting;
/* @@protoc_insertion_point(struct:AccountVoteInfo) */
} AccountVoteInfo;

typedef struct _Block {
    pb_callback_t hash;
    BlockHeader header;
    BlockBody body;
/* @@protoc_insertion_point(struct:Block) */
} Block;

typedef struct _BlockBodyParams {
    pb_callback_t hashornumber;
    PageParams paging;
/* @@protoc_insertion_point(struct:BlockBodyParams) */
} BlockBodyParams;

typedef struct _BlockMetadata {
    pb_callback_t hash;
    BlockHeader header;
    int32_t txcount;
    int64_t size;
/* @@protoc_insertion_point(struct:BlockMetadata) */
} BlockMetadata;

typedef struct _ChainInfo {
    ChainId id;
    uint32_t bpNumber;
    uint64_t maxblocksize;
    pb_callback_t maxtokens;
    pb_callback_t stakingminimum;
    pb_callback_t totalstaking;
    pb_callback_t gasprice;
    pb_callback_t nameprice;
    pb_callback_t totalvotingpower;
    pb_callback_t votingreward;
/* @@protoc_insertion_point(struct:ChainInfo) */
} ChainInfo;

typedef struct _CommitResultList {
    CommitResult results;
/* @@protoc_insertion_point(struct:CommitResultList) */
} CommitResultList;

typedef struct _NameInfo {
    Name name;
    pb_callback_t owner;
    pb_callback_t destination;
/* @@protoc_insertion_point(struct:NameInfo) */
} NameInfo;

typedef struct _Tx {
    pb_callback_t hash;
    TxBody body;
/* @@protoc_insertion_point(struct:Tx) */
} Tx;

typedef struct _BlockchainStatus {
    pb_callback_t best_block_hash;
    uint64_t best_height;
    pb_callback_t consensus_info;
    pb_callback_t best_chain_id_hash;
    ChainInfo chain_info;
/* @@protoc_insertion_point(struct:BlockchainStatus) */
} BlockchainStatus;

typedef struct _StateQueryProof {
    AccountProof contractProof;
    pb_callback_t varProofs;
/* @@protoc_insertion_point(struct:StateQueryProof) */
} StateQueryProof;

typedef struct _TxInBlock {
    TxIdx txIdx;
    Tx tx;
/* @@protoc_insertion_point(struct:TxInBlock) */
} TxInBlock;

typedef struct _VerifyResult {
    Tx tx;
    VerifyStatus error;
/* @@protoc_insertion_point(struct:VerifyResult) */
} VerifyResult;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Block_init_default                       {{{NULL}, NULL}, BlockHeader_init_default, BlockBody_init_default}
#define BlockHeader_init_default                 {{{NULL}, NULL}, {{NULL}, NULL}, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define BlockBody_init_default                   {{{NULL}, NULL}}
#define TxList_init_default                      {{{NULL}, NULL}}
#define Tx_init_default                          {{{NULL}, NULL}, TxBody_init_default}
#define TxBody_init_default                      {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, _TxType_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define TxIdx_init_default                       {{{NULL}, NULL}, 0}
#define TxInBlock_init_default                   {TxIdx_init_default, Tx_init_default}
#define State_init_default                       {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define AccountProof_init_default                {State_init_default, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define ContractVarProof_init_default            {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define StateQueryProof_init_default             {AccountProof_init_default, {{NULL}, NULL}}
#define Receipt_init_default                     {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0}
#define Event_init_default                       {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0}
#define FnArgument_init_default                  {{{NULL}, NULL}}
#define Function_init_default                    {{{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0}
#define StateVar_init_default                    {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define ABI_init_default                         {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Query_init_default                       {{{NULL}, NULL}, {{NULL}, NULL}}
#define StateQuery_init_default                  {{{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define FilterInfo_init_default                  {{{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0, {{NULL}, NULL}, 0}
#define Proposal_init_default                    {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define Account_init_default                     {{{NULL}, NULL}}
#define AccountList_init_default                 {{{NULL}, NULL}}
#define BlockchainStatus_init_default            {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, ChainInfo_init_default}
#define ChainId_init_default                     {{{NULL}, NULL}, 0, 0, {{NULL}, NULL}, 0}
#define ChainInfo_init_default                   {ChainId_init_default, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ChainStats_init_default                  {{{NULL}, NULL}}
#define Input_init_default                       {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Output_init_default                      {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Empty_init_default                       {0}
#define SingleBytes_init_default                 {{{NULL}, NULL}}
#define SingleString_init_default                {{{NULL}, NULL}}
#define AccountAddress_init_default              {{{NULL}, NULL}}
#define AccountAndRoot_init_default              {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define ListParams_init_default                  {{{NULL}, NULL}, 0, 0, 0, 0}
#define PageParams_init_default                  {0, 0}
#define BlockBodyPaged_init_default              {0, 0, 0, BlockBody_init_default}
#define BlockBodyParams_init_default             {{{NULL}, NULL}, PageParams_init_default}
#define BlockHeaderList_init_default             {{{NULL}, NULL}}
#define BlockMetadata_init_default               {{{NULL}, NULL}, BlockHeader_init_default, 0, 0}
#define BlockMetadataList_init_default           {{{NULL}, NULL}}
#define CommitResult_init_default                {{{NULL}, NULL}, _CommitStatus_MIN, {{NULL}, NULL}}
#define CommitResultList_init_default            {CommitResult_init_default}
#define VerifyResult_init_default                {Tx_init_default, _VerifyStatus_MIN}
#define Personal_init_default                    {{{NULL}, NULL}, Account_init_default}
#define ImportFormat_init_default                {SingleBytes_init_default, {{NULL}, NULL}, {{NULL}, NULL}, SingleBytes_init_default}
#define Staking_init_default                     {{{NULL}, NULL}, 0}
#define Vote_init_default                        {{{NULL}, NULL}, {{NULL}, NULL}}
#define VoteParams_init_default                  {{{NULL}, NULL}, 0}
#define AccountVoteInfo_init_default             {Staking_init_default, {{NULL}, NULL}}
#define VoteInfo_init_default                    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define VoteList_init_default                    {{{NULL}, NULL}, {{NULL}, NULL}}
#define NodeReq_init_default                     {{{NULL}, NULL}, {{NULL}, NULL}}
#define Name_init_default                        {{{NULL}, NULL}, 0}
#define NameInfo_init_default                    {Name_init_default, {{NULL}, NULL}, {{NULL}, NULL}}
#define PeersParams_init_default                 {0, 0}
#define KeyParams_init_default                   {{{NULL}, NULL}}
#define ServerInfo_init_default                  {{{NULL}, NULL}, {{NULL}, NULL}}
#define ServerInfo_StatusEntry_init_default      {{{NULL}, NULL}, {{NULL}, NULL}}
#define ServerInfo_ConfigEntry_init_default      {{{NULL}, NULL}, ConfigItem_init_default}
#define ConfigItem_init_default                  {{{NULL}, NULL}}
#define ConfigItem_PropsEntry_init_default       {{{NULL}, NULL}, {{NULL}, NULL}}
#define EventList_init_default                   {{{NULL}, NULL}}
#define ConsensusInfo_init_default               {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define EnterpriseConfigKey_init_default         {{{NULL}, NULL}}
#define EnterpriseConfig_init_default            {{{NULL}, NULL}, 0, {{NULL}, NULL}}
#define Block_init_zero                          {{{NULL}, NULL}, BlockHeader_init_zero, BlockBody_init_zero}
#define BlockHeader_init_zero                    {{{NULL}, NULL}, {{NULL}, NULL}, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define BlockBody_init_zero                      {{{NULL}, NULL}}
#define TxList_init_zero                         {{{NULL}, NULL}}
#define Tx_init_zero                             {{{NULL}, NULL}, TxBody_init_zero}
#define TxBody_init_zero                         {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, _TxType_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define TxIdx_init_zero                          {{{NULL}, NULL}, 0}
#define TxInBlock_init_zero                      {TxIdx_init_zero, Tx_init_zero}
#define State_init_zero                          {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define AccountProof_init_zero                   {State_init_zero, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define ContractVarProof_init_zero               {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define StateQueryProof_init_zero                {AccountProof_init_zero, {{NULL}, NULL}}
#define Receipt_init_zero                        {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0}
#define Event_init_zero                          {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0}
#define FnArgument_init_zero                     {{{NULL}, NULL}}
#define Function_init_zero                       {{{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0}
#define StateVar_init_zero                       {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define ABI_init_zero                            {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Query_init_zero                          {{{NULL}, NULL}, {{NULL}, NULL}}
#define StateQuery_init_zero                     {{{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define FilterInfo_init_zero                     {{{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0, {{NULL}, NULL}, 0}
#define Proposal_init_zero                       {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define Account_init_zero                        {{{NULL}, NULL}}
#define AccountList_init_zero                    {{{NULL}, NULL}}
#define BlockchainStatus_init_zero               {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, ChainInfo_init_zero}
#define ChainId_init_zero                        {{{NULL}, NULL}, 0, 0, {{NULL}, NULL}, 0}
#define ChainInfo_init_zero                      {ChainId_init_zero, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ChainStats_init_zero                     {{{NULL}, NULL}}
#define Input_init_zero                          {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Output_init_zero                         {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Empty_init_zero                          {0}
#define SingleBytes_init_zero                    {{{NULL}, NULL}}
#define SingleString_init_zero                   {{{NULL}, NULL}}
#define AccountAddress_init_zero                 {{{NULL}, NULL}}
#define AccountAndRoot_init_zero                 {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define ListParams_init_zero                     {{{NULL}, NULL}, 0, 0, 0, 0}
#define PageParams_init_zero                     {0, 0}
#define BlockBodyPaged_init_zero                 {0, 0, 0, BlockBody_init_zero}
#define BlockBodyParams_init_zero                {{{NULL}, NULL}, PageParams_init_zero}
#define BlockHeaderList_init_zero                {{{NULL}, NULL}}
#define BlockMetadata_init_zero                  {{{NULL}, NULL}, BlockHeader_init_zero, 0, 0}
#define BlockMetadataList_init_zero              {{{NULL}, NULL}}
#define CommitResult_init_zero                   {{{NULL}, NULL}, _CommitStatus_MIN, {{NULL}, NULL}}
#define CommitResultList_init_zero               {CommitResult_init_zero}
#define VerifyResult_init_zero                   {Tx_init_zero, _VerifyStatus_MIN}
#define Personal_init_zero                       {{{NULL}, NULL}, Account_init_zero}
#define ImportFormat_init_zero                   {SingleBytes_init_zero, {{NULL}, NULL}, {{NULL}, NULL}, SingleBytes_init_zero}
#define Staking_init_zero                        {{{NULL}, NULL}, 0}
#define Vote_init_zero                           {{{NULL}, NULL}, {{NULL}, NULL}}
#define VoteParams_init_zero                     {{{NULL}, NULL}, 0}
#define AccountVoteInfo_init_zero                {Staking_init_zero, {{NULL}, NULL}}
#define VoteInfo_init_zero                       {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define VoteList_init_zero                       {{{NULL}, NULL}, {{NULL}, NULL}}
#define NodeReq_init_zero                        {{{NULL}, NULL}, {{NULL}, NULL}}
#define Name_init_zero                           {{{NULL}, NULL}, 0}
#define NameInfo_init_zero                       {Name_init_zero, {{NULL}, NULL}, {{NULL}, NULL}}
#define PeersParams_init_zero                    {0, 0}
#define KeyParams_init_zero                      {{{NULL}, NULL}}
#define ServerInfo_init_zero                     {{{NULL}, NULL}, {{NULL}, NULL}}
#define ServerInfo_StatusEntry_init_zero         {{{NULL}, NULL}, {{NULL}, NULL}}
#define ServerInfo_ConfigEntry_init_zero         {{{NULL}, NULL}, ConfigItem_init_zero}
#define ConfigItem_init_zero                     {{{NULL}, NULL}}
#define ConfigItem_PropsEntry_init_zero          {{{NULL}, NULL}, {{NULL}, NULL}}
#define EventList_init_zero                      {{{NULL}, NULL}}
#define ConsensusInfo_init_zero                  {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define EnterpriseConfigKey_init_zero            {{{NULL}, NULL}}
#define EnterpriseConfig_init_zero               {{{NULL}, NULL}, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define ABI_version_tag                          1
#define ABI_language_tag                         2
#define ABI_functions_tag                        3
#define ABI_state_variables_tag                  4
#define Account_address_tag                      1
#define AccountAddress_value_tag                 1
#define AccountList_accounts_tag                 1
#define BlockBody_txs_tag                        1
#define BlockHeaderList_blocks_tag               1
#define BlockMetadataList_blocks_tag             1
#define ChainStats_report_tag                    1
#define ConfigItem_props_tag                     2
#define ConfigItem_PropsEntry_key_tag            1
#define ConfigItem_PropsEntry_value_tag          2
#define ConsensusInfo_type_tag                   1
#define ConsensusInfo_info_tag                   2
#define ConsensusInfo_bps_tag                    3
#define EnterpriseConfigKey_key_tag              1
#define EventList_events_tag                     1
#define FnArgument_name_tag                      1
#define Input_hash_tag                           1
#define Input_address_tag                        2
#define Input_value_tag                          3
#define Input_script_tag                         4
#define KeyParams_key_tag                        1
#define NodeReq_timeout_tag                      1
#define NodeReq_component_tag                    2
#define Query_contractAddress_tag                1
#define Query_queryinfo_tag                      2
#define ServerInfo_status_tag                    1
#define ServerInfo_config_tag                    2
#define ServerInfo_StatusEntry_key_tag           1
#define ServerInfo_StatusEntry_value_tag         2
#define SingleBytes_value_tag                    1
#define SingleString_value_tag                   1
#define TxList_txs_tag                           1
#define Vote_candidate_tag                       1
#define Vote_amount_tag                          2
#define VoteInfo_id_tag                          1
#define VoteInfo_candidates_tag                  2
#define VoteInfo_amount_tag                      3
#define VoteList_votes_tag                       1
#define VoteList_id_tag                          2
#define AccountAndRoot_Account_tag               1
#define AccountAndRoot_Root_tag                  2
#define AccountAndRoot_Compressed_tag            3
#define BlockBodyPaged_total_tag                 1
#define BlockBodyPaged_offset_tag                2
#define BlockBodyPaged_size_tag                  3
#define BlockBodyPaged_body_tag                  4
#define BlockHeader_chainID_tag                  1
#define BlockHeader_prevBlockHash_tag            2
#define BlockHeader_blockNo_tag                  3
#define BlockHeader_timestamp_tag                4
#define BlockHeader_blocksRootHash_tag           5
#define BlockHeader_txsRootHash_tag              6
#define BlockHeader_receiptsRootHash_tag         7
#define BlockHeader_confirms_tag                 8
#define BlockHeader_pubKey_tag                   9
#define BlockHeader_coinbaseAccount_tag          10
#define BlockHeader_sign_tag                     11
#define BlockHeader_consensus_tag                12
#define ChainId_magic_tag                        1
#define ChainId_public_tag                       2
#define ChainId_mainnet_tag                      3
#define ChainId_consensus_tag                    4
#define ChainId_version_tag                      5
#define CommitResult_hash_tag                    1
#define CommitResult_error_tag                   2
#define CommitResult_detail_tag                  3
#define ContractVarProof_value_tag               1
#define ContractVarProof_inclusion_tag           2
#define ContractVarProof_proofKey_tag            4
#define ContractVarProof_proofVal_tag            5
#define ContractVarProof_bitmap_tag              6
#define ContractVarProof_height_tag              7
#define ContractVarProof_auditPath_tag           8
#define ContractVarProof_key_tag                 9
#define EnterpriseConfig_key_tag                 1
#define EnterpriseConfig_on_tag                  2
#define EnterpriseConfig_values_tag              3
#define Event_contractAddress_tag                1
#define Event_eventName_tag                      2
#define Event_jsonArgs_tag                       3
#define Event_eventIdx_tag                       4
#define Event_txHash_tag                         5
#define Event_blockHash_tag                      6
#define Event_blockNo_tag                        7
#define Event_txIndex_tag                        8
#define FilterInfo_contractAddress_tag           1
#define FilterInfo_eventName_tag                 2
#define FilterInfo_blockfrom_tag                 3
#define FilterInfo_blockto_tag                   4
#define FilterInfo_desc_tag                      5
#define FilterInfo_argFilter_tag                 6
#define FilterInfo_recentBlockCnt_tag            7
#define Function_name_tag                        1
#define Function_arguments_tag                   2
#define Function_payable_tag                     3
#define Function_view_tag                        4
#define Function_fee_delegation_tag              5
#define ImportFormat_wif_tag                     1
#define ImportFormat_oldpass_tag                 2
#define ImportFormat_newpass_tag                 3
#define ImportFormat_keystore_tag                4
#define ListParams_hash_tag                      1
#define ListParams_height_tag                    2
#define ListParams_size_tag                      3
#define ListParams_offset_tag                    4
#define ListParams_asc_tag                       5
#define Name_name_tag                            1
#define Name_blockNo_tag                         2
#define Output_index_tag                         1
#define Output_address_tag                       2
#define Output_value_tag                         3
#define Output_script_tag                        4
#define PageParams_offset_tag                    1
#define PageParams_size_tag                      2
#define PeersParams_noHidden_tag                 1
#define PeersParams_showSelf_tag                 2
#define Personal_passphrase_tag                  1
#define Personal_account_tag                     2
#define Proposal_id_tag                          1
#define Proposal_description_tag                 3
#define Proposal_multipleChoice_tag              6
#define Receipt_contractAddress_tag              1
#define Receipt_status_tag                       2
#define Receipt_ret_tag                          3
#define Receipt_txHash_tag                       4
#define Receipt_feeUsed_tag                      5
#define Receipt_cumulativeFeeUsed_tag            6
#define Receipt_bloom_tag                        7
#define Receipt_events_tag                       8
#define Receipt_blockNo_tag                      9
#define Receipt_blockHash_tag                    10
#define Receipt_txIndex_tag                      11
#define Receipt_from_tag                         12
#define Receipt_to_tag                           13
#define Receipt_feeDelegation_tag                14
#define Receipt_gasUsed_tag                      15
#define ServerInfo_ConfigEntry_key_tag           1
#define ServerInfo_ConfigEntry_value_tag         2
#define Staking_amount_tag                       1
#define Staking_when_tag                         2
#define State_nonce_tag                          1
#define State_balance_tag                        2
#define State_codeHash_tag                       3
#define State_storageRoot_tag                    4
#define State_sqlRecoveryPoint_tag               5
#define StateQuery_contractAddress_tag           1
#define StateQuery_root_tag                      3
#define StateQuery_compressed_tag                4
#define StateQuery_storageKeys_tag               5
#define StateVar_name_tag                        1
#define StateVar_type_tag                        2
#define StateVar_len_tag                         3
#define TxBody_nonce_tag                         1
#define TxBody_account_tag                       2
#define TxBody_recipient_tag                     3
#define TxBody_amount_tag                        4
#define TxBody_payload_tag                       5
#define TxBody_gasLimit_tag                      6
#define TxBody_gasPrice_tag                      7
#define TxBody_type_tag                          8
#define TxBody_chainIdHash_tag                   9
#define TxBody_sign_tag                          10
#define TxIdx_blockHash_tag                      1
#define TxIdx_idx_tag                            2
#define VoteParams_id_tag                        1
#define VoteParams_count_tag                     2
#define AccountProof_state_tag                   1
#define AccountProof_inclusion_tag               2
#define AccountProof_key_tag                     3
#define AccountProof_proofKey_tag                4
#define AccountProof_proofVal_tag                5
#define AccountProof_bitmap_tag                  6
#define AccountProof_height_tag                  7
#define AccountProof_auditPath_tag               8
#define AccountVoteInfo_staking_tag              1
#define AccountVoteInfo_voting_tag               2
#define Block_hash_tag                           1
#define Block_header_tag                         2
#define Block_body_tag                           3
#define BlockBodyParams_hashornumber_tag         1
#define BlockBodyParams_paging_tag               2
#define BlockMetadata_hash_tag                   1
#define BlockMetadata_header_tag                 2
#define BlockMetadata_txcount_tag                3
#define BlockMetadata_size_tag                   4
#define ChainInfo_id_tag                         1
#define ChainInfo_bpNumber_tag                   2
#define ChainInfo_maxblocksize_tag               3
#define ChainInfo_maxtokens_tag                  4
#define ChainInfo_stakingminimum_tag             5
#define ChainInfo_totalstaking_tag               6
#define ChainInfo_gasprice_tag                   7
#define ChainInfo_nameprice_tag                  8
#define ChainInfo_totalvotingpower_tag           9
#define ChainInfo_votingreward_tag               10
#define CommitResultList_results_tag             1
#define NameInfo_name_tag                        1
#define NameInfo_owner_tag                       2
#define NameInfo_destination_tag                 3
#define Tx_hash_tag                              1
#define Tx_body_tag                              2
#define BlockchainStatus_best_block_hash_tag     1
#define BlockchainStatus_best_height_tag         2
#define BlockchainStatus_consensus_info_tag      3
#define BlockchainStatus_best_chain_id_hash_tag  4
#define BlockchainStatus_chain_info_tag          5
#define StateQueryProof_contractProof_tag        1
#define StateQueryProof_varProofs_tag            2
#define TxInBlock_txIdx_tag                      1
#define TxInBlock_tx_tag                         2
#define VerifyResult_tx_tag                      1
#define VerifyResult_error_tag                   2

/* Struct field encoding specification for nanopb */
extern const pb_field_t Block_fields[4];
extern const pb_field_t BlockHeader_fields[13];
extern const pb_field_t BlockBody_fields[2];
extern const pb_field_t TxList_fields[2];
extern const pb_field_t Tx_fields[3];
extern const pb_field_t TxBody_fields[11];
extern const pb_field_t TxIdx_fields[3];
extern const pb_field_t TxInBlock_fields[3];
extern const pb_field_t State_fields[6];
extern const pb_field_t AccountProof_fields[9];
extern const pb_field_t ContractVarProof_fields[9];
extern const pb_field_t StateQueryProof_fields[3];
extern const pb_field_t Receipt_fields[16];
extern const pb_field_t Event_fields[9];
extern const pb_field_t FnArgument_fields[2];
extern const pb_field_t Function_fields[6];
extern const pb_field_t StateVar_fields[4];
extern const pb_field_t ABI_fields[5];
extern const pb_field_t Query_fields[3];
extern const pb_field_t StateQuery_fields[5];
extern const pb_field_t FilterInfo_fields[8];
extern const pb_field_t Proposal_fields[4];
extern const pb_field_t Account_fields[2];
extern const pb_field_t AccountList_fields[2];
extern const pb_field_t BlockchainStatus_fields[6];
extern const pb_field_t ChainId_fields[6];
extern const pb_field_t ChainInfo_fields[11];
extern const pb_field_t ChainStats_fields[2];
extern const pb_field_t Input_fields[5];
extern const pb_field_t Output_fields[5];
extern const pb_field_t Empty_fields[1];
extern const pb_field_t SingleBytes_fields[2];
extern const pb_field_t SingleString_fields[2];
extern const pb_field_t AccountAddress_fields[2];
extern const pb_field_t AccountAndRoot_fields[4];
extern const pb_field_t ListParams_fields[6];
extern const pb_field_t PageParams_fields[3];
extern const pb_field_t BlockBodyPaged_fields[5];
extern const pb_field_t BlockBodyParams_fields[3];
extern const pb_field_t BlockHeaderList_fields[2];
extern const pb_field_t BlockMetadata_fields[5];
extern const pb_field_t BlockMetadataList_fields[2];
extern const pb_field_t CommitResult_fields[4];
extern const pb_field_t CommitResultList_fields[2];
extern const pb_field_t VerifyResult_fields[3];
extern const pb_field_t Personal_fields[3];
extern const pb_field_t ImportFormat_fields[5];
extern const pb_field_t Staking_fields[3];
extern const pb_field_t Vote_fields[3];
extern const pb_field_t VoteParams_fields[3];
extern const pb_field_t AccountVoteInfo_fields[3];
extern const pb_field_t VoteInfo_fields[4];
extern const pb_field_t VoteList_fields[3];
extern const pb_field_t NodeReq_fields[3];
extern const pb_field_t Name_fields[3];
extern const pb_field_t NameInfo_fields[4];
extern const pb_field_t PeersParams_fields[3];
extern const pb_field_t KeyParams_fields[2];
extern const pb_field_t ServerInfo_fields[3];
extern const pb_field_t ServerInfo_StatusEntry_fields[3];
extern const pb_field_t ServerInfo_ConfigEntry_fields[3];
extern const pb_field_t ConfigItem_fields[2];
extern const pb_field_t ConfigItem_PropsEntry_fields[3];
extern const pb_field_t EventList_fields[2];
extern const pb_field_t ConsensusInfo_fields[4];
extern const pb_field_t EnterpriseConfigKey_fields[2];
extern const pb_field_t EnterpriseConfig_fields[4];

/* Maximum encoded size of messages (where known) */
/* Block_size depends on runtime parameters */
/* BlockHeader_size depends on runtime parameters */
/* BlockBody_size depends on runtime parameters */
/* TxList_size depends on runtime parameters */
/* Tx_size depends on runtime parameters */
/* TxBody_size depends on runtime parameters */
/* TxIdx_size depends on runtime parameters */
/* TxInBlock_size depends on runtime parameters */
/* State_size depends on runtime parameters */
/* AccountProof_size depends on runtime parameters */
/* ContractVarProof_size depends on runtime parameters */
/* StateQueryProof_size depends on runtime parameters */
/* Receipt_size depends on runtime parameters */
/* Event_size depends on runtime parameters */
/* FnArgument_size depends on runtime parameters */
/* Function_size depends on runtime parameters */
/* StateVar_size depends on runtime parameters */
/* ABI_size depends on runtime parameters */
/* Query_size depends on runtime parameters */
/* StateQuery_size depends on runtime parameters */
/* FilterInfo_size depends on runtime parameters */
/* Proposal_size depends on runtime parameters */
/* Account_size depends on runtime parameters */
/* AccountList_size depends on runtime parameters */
/* BlockchainStatus_size depends on runtime parameters */
/* ChainId_size depends on runtime parameters */
/* ChainInfo_size depends on runtime parameters */
/* ChainStats_size depends on runtime parameters */
/* Input_size depends on runtime parameters */
/* Output_size depends on runtime parameters */
#define Empty_size                               0
/* SingleBytes_size depends on runtime parameters */
/* SingleString_size depends on runtime parameters */
/* AccountAddress_size depends on runtime parameters */
/* AccountAndRoot_size depends on runtime parameters */
/* ListParams_size depends on runtime parameters */
#define PageParams_size                          12
/* BlockBodyPaged_size depends on runtime parameters */
/* BlockBodyParams_size depends on runtime parameters */
/* BlockHeaderList_size depends on runtime parameters */
/* BlockMetadata_size depends on runtime parameters */
/* BlockMetadataList_size depends on runtime parameters */
/* CommitResult_size depends on runtime parameters */
/* CommitResultList_size depends on runtime parameters */
/* VerifyResult_size depends on runtime parameters */
/* Personal_size depends on runtime parameters */
/* ImportFormat_size depends on runtime parameters */
/* Staking_size depends on runtime parameters */
/* Vote_size depends on runtime parameters */
/* VoteParams_size depends on runtime parameters */
/* AccountVoteInfo_size depends on runtime parameters */
/* VoteInfo_size depends on runtime parameters */
/* VoteList_size depends on runtime parameters */
/* NodeReq_size depends on runtime parameters */
/* Name_size depends on runtime parameters */
/* NameInfo_size depends on runtime parameters */
#define PeersParams_size                         4
/* KeyParams_size depends on runtime parameters */
/* ServerInfo_size depends on runtime parameters */
/* ServerInfo_StatusEntry_size depends on runtime parameters */
/* ServerInfo_ConfigEntry_size depends on runtime parameters */
/* ConfigItem_size depends on runtime parameters */
/* ConfigItem_PropsEntry_size depends on runtime parameters */
/* EventList_size depends on runtime parameters */
/* ConsensusInfo_size depends on runtime parameters */
/* EnterpriseConfigKey_size depends on runtime parameters */
/* EnterpriseConfig_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define BLOCKCHAIN_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
